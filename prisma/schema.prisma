generator client {
  provider = "prisma-client-js"
  output   = ".././src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String?                @unique
  password              String
  firstName             String
  lastName              String
  phoneNumber           String?                @unique
  profileImageUrl       String?
  accountType           AccountType            @default(USER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  verified              Boolean                @default(false)
  addressId             String?
  disputes              Dispute[]              @relation("disputeUser")
  moderatedDisputes     Dispute[]              @relation("moderator")
  notifications         Notification[]
  providers             Provider[]
  asBuyer               Transaction[]          @relation("buyer")
  asSeller              Transaction[]          @relation("seller")
  address               Address?               @relation(fields: [addressId], references: [id])
  verificationDocuments VerificationDocument[]
  verificationTokens    VerificationToken[]
  wallet                Wallet?
  reviewsReceived       Review[]               @relation("sellerReviews")
  reviewsGiven          Review[]               @relation("reviewerReviews")
  AuditLog              AuditLog[]
  bankWithdrawals       BankWithdrawal[]
  notificationPreferences NotificationPreferences?


  @@index([email])
  @@index([phoneNumber])
}

model Provider {
  id           String       @id @default(uuid())
  provider     ProviderType
  providerId   String
  refreshToken String?
  tokenExpiry  DateTime?
  userId       String
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id])

  @@index([providerId])
  @@index([userId])
}

model NotificationPreferences {
  id                 String             @id @default(uuid())
  userId             String             @unique
  emailNotifications Boolean            @default(true)
  smsNotifications   Boolean            @default(true)
  pushNotifications  Boolean            @default(false)
  disabledTypes      NotificationType[] @default([])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationDocument {
  id                 String             @id @default(uuid())
  userId             String
  documentType       DocumentType
  documentNumber     String
  documentUrl        String
  verificationStatus VerificationStatus @default(PENDING)
  submittedAt        DateTime           @default(now())
  verifiedAt         DateTime?
  rejectionReason    String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String?
  country    String   @default("Nigeria")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  users      User[]
}

model Transaction {
  id                   String            @id @default(uuid())
  transactionCode      String            @unique
  sellerId             String
  buyerId              String
  title                String
  description          String
  amount               Decimal           @db.Decimal(10, 2)
  escrowFee            Decimal           @db.Decimal(10, 2)
  totalAmount          Decimal           @db.Decimal(10, 2)
  paymentCurrency      PaymentCurrency   @default(NGN)
  paymentReference     String?
  status               TransactionStatus @default(PENDING)
  escrowStatus         EscrowStatus      @default(NOT_FUNDED)
  deliveryMethod       DeliveryMethod?
  trackingInfo         String?
  expectedDeliveryDate DateTime?
  actualDeliveryDate   DateTime?
  isPaid               Boolean           @default(false)
  type                 TransactionType   @default(SERVICE)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  completedAt          DateTime?
  canceledAt           DateTime?
  refundedAt           DateTime?
  paymentId            String?
  dispute              Dispute?
  buyer                User              @relation("buyer", fields: [buyerId], references: [id])
  payment              Payment?          @relation(fields: [paymentId], references: [id])
  seller               User              @relation("seller", fields: [sellerId], references: [id])
  logs                 TransactionLog[]

  @@index([sellerId])
  @@index([buyerId])
  @@index([status])
  @@index([escrowStatus])
}

model TransactionLog {
  id            String            @id @default(uuid())
  transactionId String
  action        String
  status        TransactionStatus
  escrowStatus  EscrowStatus
  performedBy   String
  description   String
  createdAt     DateTime          @default(now())
  transaction   Transaction       @relation(fields: [transactionId], references: [id])

  @@index([transactionId])
}

model Payment {
  id               String         @id @default(uuid())
  amount           Decimal        @db.Decimal(10, 2)
  fee              Decimal        @db.Decimal(10, 2)
  totalAmount      Decimal        @db.Decimal(10, 2)
  paymentCurrency  PaymentCurrency @default(NGN)
  paymentGateway   PaymentGateway
  gatewayReference String
  gatewayResponse  Json?
  status           PaymentStatus  @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  transactions     Transaction[]
   walletTransactions WalletTransaction[] 

  @@index([gatewayReference])
  @@index([status])
}

model Wallet {
  id            String              @id @default(uuid())
  userId        String              @unique
  balance       Decimal             @default(0) @db.Decimal(10, 2)
  escrowBalance Decimal             @default(0) @db.Decimal(10, 2)
  currency      PaymentCurrency     @default(NGN)
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  user          User                @relation(fields: [userId], references: [id])
  transactions  WalletTransaction[]

  @@index([userId])
}

model WalletTransaction {
  id            String                  @id @default(uuid())
  walletId      String
  paymentId    String?
  transactionId String?
  amount        Decimal                 @db.Decimal(10, 2)
  currency      PaymentCurrency         @default(NGN)
  description   String
  type          WalletTransactionType
  reference     String                  @unique
  balanceBefore Decimal                 @db.Decimal(10, 2)
  balanceAfter  Decimal                 @db.Decimal(10, 2)
  status        WalletTransactionStatus @default(PENDING)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  wallet        Wallet                  @relation(fields: [walletId], references: [id])
   payment       Payment?                  @relation(fields: [paymentId], references: [id]) 
  

  @@index([walletId])
  @@index([reference])
  @@index([paymentId]) 
  @@index([transactionId]) 

  @@index([type])
}

model BankWithdrawal {
  id            String               @id @default(uuid())
  userId        String
  bankName      String
  accountNumber String
  accountName   String
  bankCode      String
  amount        Decimal              @db.Decimal(10, 2)
  currency      PaymentCurrency      @default(NGN)
  reference     String               @unique
  status        BankWithdrawalStatus @default(PENDING)
  failureReason String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  user          User                 @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([reference])
  @@index([status])
}

enum BankWithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Review {
  id         String   @id @default(uuid())
  sellerId   String
  reviewerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewer   User     @relation("reviewerReviews", fields: [reviewerId], references: [id])
  seller     User     @relation("sellerReviews", fields: [sellerId], references: [id])

  @@index([sellerId])
  @@index([reviewerId])
}



model Dispute {
  id            String            @id @default(uuid())
  transactionId String            @unique
  initiatorId   String
  moderatorId   String?
  status        DisputeStatus     @default(OPENED)
  reason        String
  description   String
  resolution    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  resolvedAt    DateTime?
  initiator     User              @relation("disputeUser", fields: [initiatorId], references: [id])
  moderator     User?             @relation("moderator", fields: [moderatorId], references: [id])
  transaction   Transaction       @relation(fields: [transactionId], references: [id])
  evidence      DisputeEvidence[]

  @@index([transactionId])
  @@index([initiatorId])
  @@index([status])
}

model DisputeEvidence {
  id           String   @id @default(uuid())
  disputeId    String
  evidenceType String
  evidenceUrl  String
  description  String?
  submittedBy  String
  createdAt    DateTime @default(now())
  dispute      Dispute  @relation(fields: [disputeId], references: [id], onDelete: Cascade)

  @@index([disputeId])
}

model Notification {
  id                String           @id @default(uuid())
  userId            String
  title             String
  message           String
  type              NotificationType
  isRead            Boolean          @default(false)
  relatedEntityId   String?
  relatedEntityType String?
  createdAt         DateTime         @default(now())
  user              User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model VerificationToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  type      TokenType
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model SystemSetting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id         String        @id @default(uuid())
  userId     String?
  entityId   String?
  entityType String
  action     AuditAction
  category   AuditCategory
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime      @default(now())
  user       User?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityId])
  @@index([entityType])
  @@index([action])
  @@index([category])
  @@index([createdAt])
}

enum AccountType {
  USER
  ADMIN
}

enum ProviderType {
  PHONE
  EMAIL
  GOOGLE
  FACEBOOK
  TWITTER
}

enum DocumentType {
  NATIONAL_ID
  DRIVERS_LICENSE
  PASSPORT
  VOTERS_CARD
  BUSINESS_REGISTRATION
  UTILITY_BILL
  OTHER
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELIVERED
  CANCELED
  FAILED
  DISPUTED
  REFUND_REQUESTED
  REFUNDED
}

enum EscrowStatus {
  NOT_FUNDED
  FUNDED
  DISPUTED
  RELEASED

  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentCurrency {
  NGN
}

enum DeliveryMethod {
  IN_PERSON
  SHIPPING
  COURIER
  DIGITAL
  OTHER
}

enum TransactionType {
  SERVICE
  DIGITAL
}

enum PaymentGateway {
  PAYSTACK
  FLUTTERWAVE
  WALLET
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}



enum WalletTransactionType {
  DEPOSIT
  WITHDRAWAL
  ESCROW_FUNDING
  ESCROW_RELEASE
  ESCROW_REFUND
  PAYMENT
  FEE_PAYMENT
  BONUS
}

enum WalletTransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REVERSED
}

enum DisputeStatus {
  OPENED
  IN_REVIEW
  RESOLVED_FOR_BUYER
  RESOLVED_FOR_SELLER
  RESOLVED_COMPROMISE
  CLOSED
}

enum NotificationType {
  TRANSACTION
  DISPUTE
  VERIFICATION
  PAYMENT
  SECURITY
  SYSTEM
  REVIEW
  WITHDRAWAL
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  PHONE_OTP
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  FAILED_LOGIN
  VERIFY
  APPROVE
  REJECT
  BLOCK
  UNBLOCK
  TRANSFER
  WITHDRAW
  DEPOSIT
}

enum AuditCategory {
  USER
  TRANSACTION
  WALLET
  SECURITY
  SYSTEM
  ADMIN
  VERIFICATION
  DISPUTE
  PAYMENT
}
