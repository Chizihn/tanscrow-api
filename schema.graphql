# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The type of user account"""
enum AccountType {
  ADMIN
  USER
}

input AddDisputeEvidenceInput {
  description: String
  disputeId: String!
  evidenceType: String!
  evidenceUrl: String!
}

input AddEmailInput {
  email: String!
  password: String!
}

input AddPhoneInput {
  password: String!
  phoneNumber: String!
}

type Address {
  city: String!
  country: String!
  createdAt: DateTimeISO!
  id: ID!
  postalCode: String!
  state: String!
  street: String!
  updatedAt: DateTimeISO!
}

type AuthResponse {
  token: String!
  user: User!
}

type BankWithdrawal {
  accountName: String!
  accountNumber: String!
  amount: Float!
  bankCode: String!
  bankName: String!
  createdAt: DateTimeISO!
  currency: PaymentCurrency!
  failureReason: String
  id: ID!
  reference: String
  status: BankWithdrawalStatus!
  updatedAt: DateTimeISO!
  userId: String!
}

"""The status of a bank withdrawal request"""
enum BankWithdrawalStatus {
  COMPLETED
  FAILED
  PENDING
  PROCESSING
}

input CancelTransactionInput {
  reason: String!
  transactionId: ID!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input ConfirmDeliveryInput {
  transactionId: ID!
}

input CreateReviewInput {
  comment: String
  rating: Int!
  sellerId: ID!
}

input CreateTransactionInput {
  amount: Float!
  buyerId: ID!
  deliveryMethod: DeliveryMethod
  description: String!
  expectedDeliveryDate: DateTimeISO
  paymentCurrency: String!
  sellerId: ID!
  title: String!
  type: TransactionType!
}

input CreateWalletInput {
  currency: PaymentCurrency!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""The method of delivery for the transaction"""
enum DeliveryMethod {
  COURIER
  DIGITAL
  IN_PERSON
  OTHER
  SHIPPING
}

type Dispute {
  createdAt: DateTimeISO!
  description: String
  evidence: [DisputeEvidence!]!
  id: ID!
  initiator: User!
  moderator: User
  reason: String!
  resolution: String
  resolvedAt: DateTimeISO
  status: DisputeStatus!
  transaction: Transaction!
  updatedAt: DateTimeISO!
}

type DisputeEvidence {
  createdAt: DateTimeISO!
  description: String
  evidenceType: String!
  evidenceUrl: String!
  id: ID!
  submittedBy: String!
}

"""Status of a dispute"""
enum DisputeStatus {
  CLOSED
  IN_REVIEW
  OPENED
  RESOLVED_COMPROMISE
  RESOLVED_FOR_BUYER
  RESOLVED_FOR_SELLER
}

"""Types of documents accepted for verification"""
enum DocumentType {
  BUSINESS_REGISTRATION
  DRIVERS_LICENSE
  NATIONAL_ID
  OTHER
  PASSPORT
  UTILITY_BILL
  VOTERS_CARD
}

"""The status of escrow funds"""
enum EscrowStatus {
  DISPUTED
  FUNDED
  NOT_FUNDED
  PARTIALLY_REFUNDED
  REFUNDED
  RELEASED
}

input ForgotPasswordInput {
  email: String!
}

input FundWalletInput {
  amount: Float!
  currency: PaymentCurrency!
  paymentGateway: PaymentGateway!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input MarkNotificationReadInput {
  notificationId: ID!
}

type Mutation {
  addDisputeEvidence(input: AddDisputeEvidenceInput!): Dispute!
  addEmailToAccount(email: String!): User!

  """Account create via phone number linking their email"""
  addEmailToPhoneAccount(input: AddEmailInput!): User!
  addPhoneToAccount(phoneNumber: String!): User!

  """An account created with email linking phone number"""
  addPhoneToEmailAccount(input: AddPhoneInput!): User!
  cancelTransaction(input: CancelTransactionInput!): Transaction!

  """User changing password"""
  changePassword(input: ChangePasswordInput!): User!
  confirmDelivery(input: ConfirmDeliveryInput!): Transaction!
  createReview(input: CreateReviewInput!): Review!
  createTransaction(input: CreateTransactionInput!): Transaction!
  createWallet(input: CreateWalletInput!): Wallet!
  forgotPassword(input: ForgotPasswordInput!): Boolean!
  fundWallet(input: FundWalletInput!): WalletTransaction!
  markAllNotificationsRead: Boolean!
  markNotificationRead(input: MarkNotificationReadInput!): Notification!
  openDispute(input: OpenDisputeInput!): Dispute!
  processPayment(input: ProcessPaymentInput!): Transaction!
  processWalletTransaction(input: WalletTransactionInput!): WalletTransaction!
  releaseEscrow(input: ReleaseEscrowInput!): Transaction!
  requestPhoneOtp(input: RequestPhoneOtpInput!): Boolean!
  requestRefund(input: RequestRefundInput!): Transaction!
  resendVerificationEmail(input: ResendVerificationEmailInput!): Boolean!
  resetPassword(input: ResetPasswordInput!): Boolean!
  resolveDispute(input: ResolveDisputeInput!): Dispute!

  """Review and update the status of a verification document"""
  reviewVerificationDocument(input: ReviewVerificationDocumentInput!): VerificationDocument!
  signinWithEmail(input: SigninWithEmailInput!): AuthResponse!
  signinWithPhone(input: SigninWithPhoneInput!): AuthResponse!
  signupWithEmail(input: SignupWithEmailInput!): AuthResponse!
  signupWithPhone(input: SignupWithPhoneInput!): AuthResponse!

  """Submit a new verification document for review"""
  submitVerificationDocument(input: SubmitVerificationDocumentInput!): VerificationDocument!
  updateDelivery(input: UpdateDeliveryInput!): Transaction!

  """User updating their profile"""
  updateProfile(input: UpdateProfileInput!): User!

  """Update user's profile image URL"""
  updateProfileImage(profileImageUrl: String!): User!
  verifyEmail(input: VerifyEmailInput!): Boolean!
  verifyPhoneOtp(input: VerifyPhoneOtpInput!): Boolean!
  withdrawToNigerianBank(input: WithdrawToNigerianBankInput!): BankWithdrawal!
}

type Notification {
  createdAt: DateTimeISO!
  id: ID!
  isRead: Boolean!
  message: String!
  relatedEntityId: String
  relatedEntityType: String
  title: String!
  type: NotificationType!
  updatedAt: DateTimeISO!
  userId: String!
}

"""Types of notifications in the system"""
enum NotificationType {
  DISPUTE
  PAYMENT
  SYSTEM
  TRANSACTION
  VERIFICATION
}

input OpenDisputeInput {
  description: String!
  reason: String!
  transactionId: String!
}

type Payment {
  amount: Float!
  createdAt: DateTimeISO!
  fee: Float!
  gatewayReference: String!
  gatewayResponse: JSONObject
  id: ID!
  paymentCurrency: PaymentCurrency!
  paymentGateway: PaymentGateway!
  status: PaymentStatus!
  totalAmount: Float!
  updatedAt: DateTimeISO!
}

"""The currency for payments"""
enum PaymentCurrency {
  NGN
}

"""The payment gateway used"""
enum PaymentGateway {
  FLUTTERWAVE
  PAYSTACK
  WALLET
}

"""The status of the payment"""
enum PaymentStatus {
  FAILED
  PARTIALLY_REFUNDED
  PENDING
  REFUNDED
  SUCCESSFUL
}

input ProcessPaymentInput {
  paymentGateway: PaymentGateway!
  transactionId: ID!
}

type Provider {
  createdAt: DateTimeISO!
  id: ID!
  provider: ProviderType!
  providerId: String!
  refreshToken: String
  tokenExpiry: DateTimeISO
  userId: String!
}

"""The type of authentication provider"""
enum ProviderType {
  EMAIL
  FACEBOOK
  GOOGLE
  PHONE
  TWITTER
}

type Query {
  dispute(id: String!): Dispute!
  disputes: [Dispute!]!
  getPaymentDetails(reference: String!): JSONObject
  getSellerReviews(sellerId: String!): [Review!]!

  """Get current user"""
  me: User

  """Retrieve verification documents for the authenticated user"""
  myVerificationDocuments: [VerificationDocument!]!
  notifications: [Notification!]!

  """Retrieve pending verification documents for admin review"""
  pendingVerificationDocuments: [VerificationDocument!]!

  """Find user by email adress or phone number"""
  searchUser(input: String!): User
  transaction(id: ID!): Transaction!
  transactions: [Transaction!]!
  unreadNotifications: [Notification!]!

  """Find user by id"""
  user(id: String!): User

  """Fetch reviews given by user"""
  userReviewsGiven: [Review!]!

  """Fetch reviews received by user"""
  userReviewsReceived: [Review!]!

  """Fetch all users"""
  users: [User!]!
  verifyPayment(gateway: PaymentGateway!, reference: String!): Boolean!
  wallet: Wallet!
  walletTransactions: [WalletTransaction!]!
}

input ReleaseEscrowInput {
  transactionId: ID!
}

input RequestPhoneOtpInput {
  phoneNumber: String!
}

input RequestRefundInput {
  reason: String!
  transactionId: ID!
}

input ResendVerificationEmailInput {
  email: String!
}

input ResetPasswordInput {
  newPassword: String!
  token: String!
}

input ResolveDisputeInput {
  disputeId: String!
  resolution: DisputeStatus!
  resolutionDetails: String!
}

type Review {
  comment: String
  createdAt: DateTimeISO!
  id: ID!
  rating: Int!
  reviewerId: ID!
  sellerId: ID!
  updatedAt: DateTimeISO!
}

input ReviewVerificationDocumentInput {
  documentId: String!
  rejectionReason: String
  status: VerificationStatus!
}

input SigninWithEmailInput {
  email: String!
  password: String!
}

input SigninWithPhoneInput {
  password: String!
  phoneNumber: String!
}

input SignupWithEmailInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String
}

input SignupWithPhoneInput {
  email: String
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
}

input SubmitVerificationDocumentInput {
  documentNumber: String!
  documentType: DocumentType!
  documentUrl: String!
}

type Transaction {
  actualDeliveryDate: DateTimeISO
  amount: Float!
  buyer: User!
  canceledAt: DateTimeISO
  completedAt: DateTimeISO
  createdAt: DateTimeISO!
  deliveryMethod: DeliveryMethod
  description: String!
  escrowFee: Float!
  escrowStatus: EscrowStatus!
  expectedDeliveryDate: DateTimeISO
  id: ID!
  isPaid: Boolean!
  logs: [TransactionLog!]!
  payment: Payment
  paymentCurrency: String!
  paymentReference: String
  refundedAt: DateTimeISO
  seller: User!
  status: TransactionStatus!
  title: String!
  totalAmount: Float!
  trackingInfo: String
  transactionCode: String!
  type: TransactionType!
  updatedAt: DateTimeISO!
}

type TransactionLog {
  action: String!
  createdAt: DateTimeISO!
  description: String!
  escrowStatus: EscrowStatus!
  id: ID!
  performedBy: String!
  status: TransactionStatus!
  transaction: Transaction!
}

"""The status of a transaction"""
enum TransactionStatus {
  CANCELED
  COMPLETED
  DELIVERED
  DISPUTED
  FAILED
  IN_PROGRESS
  PENDING
  REFUNDED
  REFUND_REQUESTED
}

"""The type of transaction"""
enum TransactionType {
  DIGITAL
  SERVICE
}

input UpdateDeliveryInput {
  deliveryMethod: DeliveryMethod!
  expectedDeliveryDate: DateTimeISO
  trackingInfo: String
  transactionId: ID!
}

input UpdateProfileInput {
  addressId: String
  city: String
  country: String
  firstName: String
  lastName: String
  phoneNumber: String
  postalCode: String
  profileImageUrl: String
  state: String
  street: String
}

type User {
  accountType: AccountType!
  address: Address
  addressId: String
  createdAt: DateTimeISO!
  email: String
  firstName: String!
  id: ID!
  lastName: String!
  phoneNumber: String
  profileImageUrl: String
  providers: [Provider!]!
  updatedAt: DateTimeISO!
  verified: Boolean!
}

type VerificationDocument {
  createdAt: DateTimeISO!
  documentNumber: String!
  documentType: DocumentType!
  documentUrl: String!
  id: String!
  rejectionReason: String
  submittedAt: DateTimeISO!
  updatedAt: DateTimeISO!
  userId: String!
  verificationStatus: VerificationStatus!
  verifiedAt: DateTimeISO
}

"""Status of verification document review"""
enum VerificationStatus {
  APPROVED
  PENDING
  REJECTED
}

input VerifyEmailInput {
  token: String!
}

input VerifyPhoneOtpInput {
  otp: String!
  phoneNumber: String!
}

type Wallet {
  balance: Float!
  createdAt: DateTimeISO!
  currency: PaymentCurrency!
  escrowBalance: Float!
  id: ID!
  isActive: Boolean!
  transactions: [WalletTransaction!]!
  updatedAt: DateTimeISO!
  userId: ID!
}

"""Details of a wallet transaction"""
type WalletTransaction {
  amount: Float!
  balanceAfter: Float!
  balanceBefore: Float!
  createdAt: DateTimeISO!
  currency: PaymentCurrency!
  description: String!
  id: ID!
  reference: String!
  status: WalletTransactionStatus!
  type: WalletTransactionType!
  updatedAt: DateTimeISO!
  wallet: Wallet!
  walletId: ID!
}

input WalletTransactionInput {
  amount: Float!
  currency: PaymentCurrency!
  description: String
  type: WalletTransactionType!
}

"""The status of wallet transaction"""
enum WalletTransactionStatus {
  COMPLETED
  FAILED
  PENDING
  REVERSED
}

"""The type of wallet transaction"""
enum WalletTransactionType {
  BONUS
  DEPOSIT
  ESCROW_FUNDING
  ESCROW_REFUND
  ESCROW_RELEASE
  FEE_PAYMENT
  PAYMENT
  WITHDRAWAL
}

input WithdrawToNigerianBankInput {
  accountName: String!
  accountNumber: String!
  amount: Float!
  bankCode: String!
  bankName: String!
  currency: PaymentCurrency!
}