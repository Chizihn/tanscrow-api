
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  profileImageUrl: 'profileImageUrl',
  accountType: 'accountType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  verified: 'verified',
  addressId: 'addressId'
};

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  tokenExpiry: 'tokenExpiry',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  pushNotifications: 'pushNotifications',
  disabledTypes: 'disabledTypes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationDocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  documentUrl: 'documentUrl',
  verificationStatus: 'verificationStatus',
  submittedAt: 'submittedAt',
  verifiedAt: 'verifiedAt',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  transactionCode: 'transactionCode',
  sellerId: 'sellerId',
  buyerId: 'buyerId',
  title: 'title',
  description: 'description',
  amount: 'amount',
  escrowFee: 'escrowFee',
  totalAmount: 'totalAmount',
  paymentCurrency: 'paymentCurrency',
  paymentReference: 'paymentReference',
  status: 'status',
  escrowStatus: 'escrowStatus',
  deliveryMethod: 'deliveryMethod',
  trackingInfo: 'trackingInfo',
  expectedDeliveryDate: 'expectedDeliveryDate',
  actualDeliveryDate: 'actualDeliveryDate',
  isPaid: 'isPaid',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  canceledAt: 'canceledAt',
  refundedAt: 'refundedAt',
  paymentId: 'paymentId'
};

exports.Prisma.TransactionLogScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  action: 'action',
  status: 'status',
  escrowStatus: 'escrowStatus',
  performedBy: 'performedBy',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  fee: 'fee',
  totalAmount: 'totalAmount',
  paymentCurrency: 'paymentCurrency',
  paymentGateway: 'paymentGateway',
  gatewayReference: 'gatewayReference',
  gatewayResponse: 'gatewayResponse',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  escrowBalance: 'escrowBalance',
  currency: 'currency',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletTransactionScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  paymentId: 'paymentId',
  transactionId: 'transactionId',
  amount: 'amount',
  currency: 'currency',
  description: 'description',
  type: 'type',
  reference: 'reference',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankWithdrawalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  accountName: 'accountName',
  bankCode: 'bankCode',
  amount: 'amount',
  currency: 'currency',
  reference: 'reference',
  status: 'status',
  failureReason: 'failureReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  reviewerId: 'reviewerId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DisputeScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  initiatorId: 'initiatorId',
  moderatorId: 'moderatorId',
  status: 'status',
  reason: 'reason',
  description: 'description',
  resolution: 'resolution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.DisputeEvidenceScalarFieldEnum = {
  id: 'id',
  disputeId: 'disputeId',
  evidenceType: 'evidenceType',
  evidenceUrl: 'evidenceUrl',
  description: 'description',
  submittedBy: 'submittedBy',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  relatedEntityId: 'relatedEntityId',
  relatedEntityType: 'relatedEntityType',
  createdAt: 'createdAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  type: 'type',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  entityId: 'entityId',
  entityType: 'entityType',
  action: 'action',
  category: 'category',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AccountType = exports.$Enums.AccountType = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.ProviderType = exports.$Enums.ProviderType = {
  PHONE: 'PHONE',
  EMAIL: 'EMAIL',
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK',
  TWITTER: 'TWITTER'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TRANSACTION: 'TRANSACTION',
  DISPUTE: 'DISPUTE',
  VERIFICATION: 'VERIFICATION',
  PAYMENT: 'PAYMENT',
  SECURITY: 'SECURITY',
  SYSTEM: 'SYSTEM',
  REVIEW: 'REVIEW',
  WITHDRAWAL: 'WITHDRAWAL'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  NATIONAL_ID: 'NATIONAL_ID',
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  PASSPORT: 'PASSPORT',
  VOTERS_CARD: 'VOTERS_CARD',
  BUSINESS_REGISTRATION: 'BUSINESS_REGISTRATION',
  UTILITY_BILL: 'UTILITY_BILL',
  OTHER: 'OTHER'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.PaymentCurrency = exports.$Enums.PaymentCurrency = {
  NGN: 'NGN'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  DELIVERED: 'DELIVERED',
  CANCELED: 'CANCELED',
  FAILED: 'FAILED',
  DISPUTED: 'DISPUTED',
  REFUND_REQUESTED: 'REFUND_REQUESTED',
  REFUNDED: 'REFUNDED'
};

exports.EscrowStatus = exports.$Enums.EscrowStatus = {
  NOT_FUNDED: 'NOT_FUNDED',
  FUNDED: 'FUNDED',
  DISPUTED: 'DISPUTED',
  RELEASED: 'RELEASED',
  REFUNDED: 'REFUNDED',
  PARTIALLY_REFUNDED: 'PARTIALLY_REFUNDED'
};

exports.DeliveryMethod = exports.$Enums.DeliveryMethod = {
  IN_PERSON: 'IN_PERSON',
  SHIPPING: 'SHIPPING',
  COURIER: 'COURIER',
  DIGITAL: 'DIGITAL',
  OTHER: 'OTHER'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  SERVICE: 'SERVICE',
  DIGITAL: 'DIGITAL'
};

exports.PaymentGateway = exports.$Enums.PaymentGateway = {
  PAYSTACK: 'PAYSTACK',
  FLUTTERWAVE: 'FLUTTERWAVE',
  WALLET: 'WALLET'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCESSFUL: 'SUCCESSFUL',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  PARTIALLY_REFUNDED: 'PARTIALLY_REFUNDED'
};

exports.WalletTransactionType = exports.$Enums.WalletTransactionType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  ESCROW_FUNDING: 'ESCROW_FUNDING',
  ESCROW_RELEASE: 'ESCROW_RELEASE',
  ESCROW_REFUND: 'ESCROW_REFUND',
  PAYMENT: 'PAYMENT',
  FEE_PAYMENT: 'FEE_PAYMENT',
  BONUS: 'BONUS'
};

exports.WalletTransactionStatus = exports.$Enums.WalletTransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REVERSED: 'REVERSED'
};

exports.BankWithdrawalStatus = exports.$Enums.BankWithdrawalStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.DisputeStatus = exports.$Enums.DisputeStatus = {
  OPENED: 'OPENED',
  IN_REVIEW: 'IN_REVIEW',
  RESOLVED_FOR_BUYER: 'RESOLVED_FOR_BUYER',
  RESOLVED_FOR_SELLER: 'RESOLVED_FOR_SELLER',
  RESOLVED_COMPROMISE: 'RESOLVED_COMPROMISE',
  CLOSED: 'CLOSED'
};

exports.TokenType = exports.$Enums.TokenType = {
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  PASSWORD_RESET: 'PASSWORD_RESET',
  PHONE_OTP: 'PHONE_OTP'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  FAILED_LOGIN: 'FAILED_LOGIN',
  VERIFY: 'VERIFY',
  APPROVE: 'APPROVE',
  REJECT: 'REJECT',
  BLOCK: 'BLOCK',
  UNBLOCK: 'UNBLOCK',
  TRANSFER: 'TRANSFER',
  WITHDRAW: 'WITHDRAW',
  DEPOSIT: 'DEPOSIT'
};

exports.AuditCategory = exports.$Enums.AuditCategory = {
  USER: 'USER',
  TRANSACTION: 'TRANSACTION',
  WALLET: 'WALLET',
  SECURITY: 'SECURITY',
  SYSTEM: 'SYSTEM',
  ADMIN: 'ADMIN',
  VERIFICATION: 'VERIFICATION',
  DISPUTE: 'DISPUTE',
  PAYMENT: 'PAYMENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Provider: 'Provider',
  NotificationPreferences: 'NotificationPreferences',
  VerificationDocument: 'VerificationDocument',
  Address: 'Address',
  Transaction: 'Transaction',
  TransactionLog: 'TransactionLog',
  Payment: 'Payment',
  Wallet: 'Wallet',
  WalletTransaction: 'WalletTransaction',
  BankWithdrawal: 'BankWithdrawal',
  Review: 'Review',
  Dispute: 'Dispute',
  DisputeEvidence: 'DisputeEvidence',
  Notification: 'Notification',
  VerificationToken: 'VerificationToken',
  SystemSetting: 'SystemSetting',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
